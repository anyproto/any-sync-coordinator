// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-coordinator/subscribe (interfaces: SubscribeService)
//
// Generated by this command:
//
//	mockgen -destination mock_subscribe/mock_subscribe.go github.com/anyproto/any-sync-coordinator/subscribe SubscribeService
//

// Package mock_subscribe is a generated GoMock package.
package mock_subscribe

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	coordinatorproto "github.com/anyproto/any-sync/coordinator/coordinatorproto"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscribeService is a mock of SubscribeService interface.
type MockSubscribeService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribeServiceMockRecorder
	isgomock struct{}
}

// MockSubscribeServiceMockRecorder is the mock recorder for MockSubscribeService.
type MockSubscribeServiceMockRecorder struct {
	mock *MockSubscribeService
}

// NewMockSubscribeService creates a new mock instance.
func NewMockSubscribeService(ctrl *gomock.Controller) *MockSubscribeService {
	mock := &MockSubscribeService{ctrl: ctrl}
	mock.recorder = &MockSubscribeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribeService) EXPECT() *MockSubscribeServiceMockRecorder {
	return m.recorder
}

// AddStream mocks base method.
func (m *MockSubscribeService) AddStream(eventType coordinatorproto.NotifyEventType, accountId, peerId string, stream coordinatorproto.DRPCCoordinator_NotifySubscribeStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStream", eventType, accountId, peerId, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStream indicates an expected call of AddStream.
func (mr *MockSubscribeServiceMockRecorder) AddStream(eventType, accountId, peerId, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStream", reflect.TypeOf((*MockSubscribeService)(nil).AddStream), eventType, accountId, peerId, stream)
}

// Close mocks base method.
func (m *MockSubscribeService) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSubscribeServiceMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubscribeService)(nil).Close), ctx)
}

// Init mocks base method.
func (m *MockSubscribeService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockSubscribeServiceMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSubscribeService)(nil).Init), a)
}

// Name mocks base method.
func (m *MockSubscribeService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSubscribeServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSubscribeService)(nil).Name))
}

// NotifyAllPeers mocks base method.
func (m *MockSubscribeService) NotifyAllPeers(eventType coordinatorproto.NotifyEventType, accountId string, payload []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyAllPeers", eventType, accountId, payload)
}

// NotifyAllPeers indicates an expected call of NotifyAllPeers.
func (mr *MockSubscribeServiceMockRecorder) NotifyAllPeers(eventType, accountId, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAllPeers", reflect.TypeOf((*MockSubscribeService)(nil).NotifyAllPeers), eventType, accountId, payload)
}

// Run mocks base method.
func (m *MockSubscribeService) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockSubscribeServiceMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSubscribeService)(nil).Run), ctx)
}
