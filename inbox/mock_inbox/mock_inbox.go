// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-coordinator/inbox (interfaces: InboxService)
//
// Generated by this command:
//
//	mockgen -destination mock_inbox/mock_inbox.go github.com/anyproto/any-sync-coordinator/inbox InboxService
//

// Package mock_inbox is a generated GoMock package.
package mock_inbox

import (
	context "context"
	reflect "reflect"

	inbox "github.com/anyproto/any-sync-coordinator/inbox"
	app "github.com/anyproto/any-sync/app"
	coordinatorproto "github.com/anyproto/any-sync/coordinator/coordinatorproto"
	gomock "go.uber.org/mock/gomock"
)

// MockInboxService is a mock of InboxService interface.
type MockInboxService struct {
	ctrl     *gomock.Controller
	recorder *MockInboxServiceMockRecorder
	isgomock struct{}
}

// MockInboxServiceMockRecorder is the mock recorder for MockInboxService.
type MockInboxServiceMockRecorder struct {
	mock *MockInboxService
}

// NewMockInboxService creates a new mock instance.
func NewMockInboxService(ctrl *gomock.Controller) *MockInboxService {
	mock := &MockInboxService{ctrl: ctrl}
	mock.recorder = &MockInboxServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInboxService) EXPECT() *MockInboxServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockInboxService) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockInboxServiceMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInboxService)(nil).Close), ctx)
}

// InboxAddMessage mocks base method.
func (m *MockInboxService) InboxAddMessage(ctx context.Context, msg *inbox.InboxMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InboxAddMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// InboxAddMessage indicates an expected call of InboxAddMessage.
func (mr *MockInboxServiceMockRecorder) InboxAddMessage(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InboxAddMessage", reflect.TypeOf((*MockInboxService)(nil).InboxAddMessage), ctx, msg)
}

// InboxFetch mocks base method.
func (m *MockInboxService) InboxFetch(ctx context.Context, offset string) (*inbox.InboxFetchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InboxFetch", ctx, offset)
	ret0, _ := ret[0].(*inbox.InboxFetchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InboxFetch indicates an expected call of InboxFetch.
func (mr *MockInboxServiceMockRecorder) InboxFetch(ctx, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InboxFetch", reflect.TypeOf((*MockInboxService)(nil).InboxFetch), ctx, offset)
}

// Init mocks base method.
func (m *MockInboxService) Init(a *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockInboxServiceMockRecorder) Init(a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInboxService)(nil).Init), a)
}

// Name mocks base method.
func (m *MockInboxService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockInboxServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInboxService)(nil).Name))
}

// Run mocks base method.
func (m *MockInboxService) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockInboxServiceMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInboxService)(nil).Run), ctx)
}

// SubscribeClient mocks base method.
func (m *MockInboxService) SubscribeClient(stream coordinatorproto.DRPCCoordinator_NotifySubscribeStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeClient", stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeClient indicates an expected call of SubscribeClient.
func (mr *MockInboxServiceMockRecorder) SubscribeClient(stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeClient", reflect.TypeOf((*MockInboxService)(nil).SubscribeClient), stream)
}
